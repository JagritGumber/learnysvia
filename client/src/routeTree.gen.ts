/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as ProtectedRoomsRouteImport } from './routes/_protected/rooms'
import { Route as ProtectedCatalogRouteImport } from './routes/_protected/catalog'
import { Route as PublicRoomIdRouteImport } from './routes/_public/room.$id'
import { Route as PublicJoinCodeRouteImport } from './routes/_public/join.$code'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const ProtectedRoomsRoute = ProtectedRoomsRouteImport.update({
  id: '/rooms',
  path: '/rooms',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedCatalogRoute = ProtectedCatalogRouteImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const PublicRoomIdRoute = PublicRoomIdRouteImport.update({
  id: '/room/$id',
  path: '/room/$id',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicJoinCodeRoute = PublicJoinCodeRouteImport.update({
  id: '/join/$code',
  path: '/join/$code',
  getParentRoute: () => PublicRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/catalog': typeof ProtectedCatalogRoute
  '/rooms': typeof ProtectedRoomsRoute
  '/': typeof PublicIndexRoute
  '/join/$code': typeof PublicJoinCodeRoute
  '/room/$id': typeof PublicRoomIdRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/catalog': typeof ProtectedCatalogRoute
  '/rooms': typeof ProtectedRoomsRoute
  '/': typeof PublicIndexRoute
  '/join/$code': typeof PublicJoinCodeRoute
  '/room/$id': typeof PublicRoomIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/auth': typeof AuthRoute
  '/_protected/catalog': typeof ProtectedCatalogRoute
  '/_protected/rooms': typeof ProtectedRoomsRoute
  '/_public/': typeof PublicIndexRoute
  '/_public/join/$code': typeof PublicJoinCodeRoute
  '/_public/room/$id': typeof PublicRoomIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/auth' | '/catalog' | '/rooms' | '/' | '/join/$code' | '/room/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/catalog' | '/rooms' | '/' | '/join/$code' | '/room/$id'
  id:
    | '__root__'
    | '/_protected'
    | '/_public'
    | '/auth'
    | '/_protected/catalog'
    | '/_protected/rooms'
    | '/_public/'
    | '/_public/join/$code'
    | '/_public/room/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  AuthRoute: typeof AuthRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_protected/rooms': {
      id: '/_protected/rooms'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof ProtectedRoomsRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/catalog': {
      id: '/_protected/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof ProtectedCatalogRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_public/room/$id': {
      id: '/_public/room/$id'
      path: '/room/$id'
      fullPath: '/room/$id'
      preLoaderRoute: typeof PublicRoomIdRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/join/$code': {
      id: '/_public/join/$code'
      path: '/join/$code'
      fullPath: '/join/$code'
      preLoaderRoute: typeof PublicJoinCodeRouteImport
      parentRoute: typeof PublicRouteRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedCatalogRoute: typeof ProtectedCatalogRoute
  ProtectedRoomsRoute: typeof ProtectedRoomsRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedCatalogRoute: ProtectedCatalogRoute,
  ProtectedRoomsRoute: ProtectedRoomsRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
  PublicJoinCodeRoute: typeof PublicJoinCodeRoute
  PublicRoomIdRoute: typeof PublicRoomIdRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
  PublicJoinCodeRoute: PublicJoinCodeRoute,
  PublicRoomIdRoute: PublicRoomIdRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  AuthRoute: AuthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
